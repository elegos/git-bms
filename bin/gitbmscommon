bms_config_file=".git/bms_branches"

bms_banner() {
    echo "Git Branch Management System"
    echo ""
}

help() {
    echo "Available commands:"
    echo -e "\tinit: initialize BMS for the current repository"
    echo -e "\tfeature: manages the features lifecycle"
    echo ""
    echo -e "To know more about a command, type: git bms <command> help"
    echo ""
}

common_exec() {
    case $1 in
        help | --help)
        bms_banner
        help
        exit 0
        ;;
    esac
}

check_git_repo() {
    git status > /dev/null 2>&1

    if ! [ $? -eq 0 ]; then
        echo "BMS works on git repositories. Initialize the repository first." 1>&2
        exit 1
    fi
}

question_string() {
    message="$1"
    default_value="$2"
    if ! [ "${default_value}" == "" ]; then
        message="$1 (default: ${default_value})"
    fi
    echo -n "${message} " > $(tty)
    read -r reply

    if [ "${reply}" = "" ] && ! [ "${default_value}" = "" ]; then
        reply="${default_value}"
    fi

    echo $reply
}

CONFIG_check_existance() {
    if ! [ -f "${bms_config_file}" ]; then
        echo "Please run \`git bms init\` first" 1>&2
        exit 1
    fi
}

CONFIG_get_dev_branch() {
    head -n1 "${bms_config_file}" | awk '{print $1}'
}

BRANCH_check_current_exact_match() {
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ "${current_branch}" != "$1" ]]; then
        echo "Current branch (${current_branch}) is not the expected one ($1)" 1>&2

        exit 1
    fi
}

BRANCH_check_current_prefix() {
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ "${current_branch}" != "$1/"* ]]; then
        echo "Current branch (${current_branch}) is not the expected one ($1/)" 1>&2

        exit 1
    fi
}