bms_config_file=".git/bms_branches"

bms_banner() {
    echo "Git Branch Management System"
    echo ""
}

help() {
    echo "Available commands:"
    echo -e "\tinit: initialize BMS for the current repository"
    echo -e "\tfeature: manages the features lifecycle"
    echo ""
    echo -e "To know more about a command, type: git bms <command> help"
    echo ""
}

common_exec() {
    case $1 in
        help | --help)
        bms_banner
        help
        exit 0
        ;;
    esac
}

check_git_repo() {
    git status > /dev/null 2>&1

    if ! [ $? -eq 0 ]; then
        echo "BMS works on git repositories. Initialize the repository first." 1>&2
        exit 1
    fi
}

question_string() {
    message="$1"
    default_value="$2"
    if ! [ "${default_value}" == "" ]; then
        message="$1 (default: ${default_value})"
    fi
    echo -n "${message} " > $(tty)
    read -r reply

    if [ "${reply}" = "" ] && ! [ "${default_value}" = "" ]; then
        reply="${default_value}"
    fi

    echo $reply
}

find_in_array() {
    to_be_found="$1"
    shift
    found=0

    for i in $@; do
        if [[ $i == $to_be_found ]]; then
            found=1
            break
        fi
    done

    echo $found
}

CONFIG_check_existance() {
    if ! [ -f "${bms_config_file}" ]; then
        echo "Please run \`git bms init\` first" 1>&2
        exit 1
    fi
}

CONFIG_check_branch_is_promotable() {
    branches=($(head -n1 "${bms_config_file}"))
    num_branches=${#branches[@]}
    branches=(${branches[@]:0:(($num_branches-2))})

    found=$(find_in_array "$1" "${branches[@]}")

    if [ ${found} -eq 0 ]; then
        return 1
    fi

    return 0
}

CONFIG_get_next_branch() {
    branches=($(head -n1 "${bms_config_file}"))
    i=0
    for ((i=0; i<${#branches[@]}; i++)) do
        if [ "${branches[$i]}" == "$1" ]; then
            break
        fi
    done

    echo ${branches[$i+1]}
}

CONFIG_get_dev_branch() {
    head -n1 "${bms_config_file}" | awk '{print $1}'
}

CONFIG_get_feature_finish_strategy() {
    strategy=$(sed -n '2p' "${bms_config_file}")
    if [ "${strategy}" = "" ]; then
        strategy="m"
    fi

    echo ${strategy}
}

CONFIG_check_fixable_branch() {
    branches=($(head -n1 "${bms_config_file}"))
    num_branches=${#branches[@]}

    for (( i=1; i<(($num_branches)); i++)) do
        if [ "${branches[$i]}" == "$1" ]; then
            return 0
        fi
    done

    return 1
}

CONFIG_get_cascade_branches_from_branch() {
    raw_branches=($(head -n1 "${bms_config_file}"))

    branches=()
    for branch in ${raw_branches[@]}; do
        branches+=($branch)

        if [ "${branch}" == "$1" ]; then
            break
        fi
    done

    echo ${branches[@]}
}

BRANCH_current_branch() {
    git rev-parse --abbrev-ref HEAD
}

BRANCH_check_existance() {
    git show-ref --verify --quiet refs/heads/$1
    ret_val=$?

    if [ $ret_val -ne 0 ]; then
        echo "Branch '${fork_from}' does not exist" 1>&2
    fi

    return ${ret_val}
}

BRANCH_check_current_exact_match() {
    current_branch=$(BRANCH_current_branch)
    if [[ "${current_branch}" != "$1" ]]; then
        echo "Current branch (${current_branch}) is not the expected one ($1)" 1>&2

        exit 1
    fi
}

BRANCH_check_current_prefix() {
    current_branch=$(BRANCH_current_branch)
    if [[ "${current_branch}" != "$1/"* ]]; then
        echo "Current branch (${current_branch}) is not the expected one ($1/)" 1>&2

        exit 1
    fi
}

CURRENT_BRANCH_check_pristine() {
    if [ -z "$(git status --porcelain)" ]; then
        return 0
    fi

    return 1
}

CHERRY_PICK_apply_commits_to_branch() {
    current_branch=$(BRANCH_current_branch)
    target_branch="$1"
    shift

    git checkout "${target_branch}" 1> /dev/null 2>&1
    for commit in $@; do
        echo "[${target_branch}] Applying commit: $commit"
        git cherry-pick $commit
        if [ $? -ne 0 ]; then
            echo "Error applying commit: $commit" 1>&2
            echo "Please fix the issue and try again" 1>&2
            git cherry-pick --abort
            git checkout "${current_branch}"

            exit 1
        fi
    done
    git checkout "${current_branch}" 1> /dev/null 2>&1
}