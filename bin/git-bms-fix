#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${SCRIPT_DIR}/gitbmscommon"

start() {
    fork_from=$(BRANCH_current_branch)
    fix_name=$1

    if [ "$2" != "" ]; then
        fork_from="$1"
        fix_name="$2"
    fi

    BRANCH_check_existance "${fork_from}" || {
        exit 1
    }

    CURRENT_BRANCH_check_pristine || {
        echo "Current branch is not pristine. Please stash or commit and retry." 1>&2
        exit 1
    }

    CONFIG_check_fixable_branch "${fork_from}" || {
        echo "The target branch '${fork_from}' is not a known branch to BMS. Please use a defined branch, or reconfigure via git bms init." 1>&2
        exit 1
    }

    git checkout -b "${fork_from}fix/$fix_name"
}

finish() {
    CURRENT_BRANCH_check_pristine || {
        echo "The stage is not pristine. Please stash or commit and try again."
        exit 1
    }

    no_delete=$(find_in_array "--no-delete" $@)
    if [ "$1" == "--no-delete" ]; then
        shift
    fi

    fix_from=$(BRANCH_current_branch)
    if [ "$1" != "" ] && [ "$1" != "--no-delete" ]; then
        fix_from="$1"
    fi

    [[ "${fix_from}" =~ ^(.+?)fix\/.*$ ]]
    base_branch="${BASH_REMATCH[1]}"

    CONFIG_check_fixable_branch "${base_branch}" || {
        echo "The base branch '${base_branch}' is not a known branch to BMS." 1>&2
        exit 1
    }

    git checkout "$fix_from"

    merge_branches=($(CONFIG_get_cascade_branches_from_branch "$base_branch"))

    for branch in ${merge_branches[@]}; do
        echo ""
        BRANCH_check_existance "${branch}" || {
            echo "Please create the branch and try again." 1>&2
            exit 1
        }

        echo "Applying $fix_from on $branch"
        git checkout "${branch}"
        git merge "${fix_from}"

        if [ $? -ne 0 ]; then
            echo ""
            echo "-- ERROR --"
            echo ""
            echo "Error merging ${fix_from} into ${branch}." 1>&2
            echo "Proceed with conflict resolution and finish the merge." 1>&2
            echo "Once done, run 'git bms fix finish ${fix_from}'" 1>&2
            echo ""

            exit 1
        fi
    done

    if [ ${no_delete} -eq 0 ]; then
        echo ""
        git branch -D "${fix_from}"
    fi
}

help() {
    echo "Usage: git bms fix <subcommand>"
    echo "Works on any branch known to BMS (as per init) but the development one"

    echo ""
    echo "Available subcommands:"
    echo -e "\tstart <branch from which to fork from?> <name of the fix>"
    echo -e "\t\tStarts a new fix branch (if it does not already exists - the name must not contain spaces or slashes), named after the current branch, or the specified one"
    echo -e "\t\tExample (on branch "test"): git bms fix start my_new_fix"
    echo -e "\t\tExample (equivalent): git bms fix start test my_new_fix"
    echo -e "\t\tResult: a new branch named testfix/my_new_fix, forked from branch <test>"

    echo ""
    echo -e "\tfinish <fix_branch?> [--no-delete]"
    echo -e "\t\tFlags:"
    echo -e "\t\t\t--no-delete: do not delete the fix branch once the process is finished."
    echo -e "\t\tEnds the fix of the current branch, or the given one."
    echo -e "\t\tThe process will merge the fix branch into the original and all the previous ones."
    echo -e "\t\tExample: git bms feature finish testfix/whatever --no-delete"

    echo ""
    echo "WIP help"
}

subcommand="$1"
shift

case "${subcommand}" in
    start)
        start $@
    ;;
    end|finish)
        finish $@
    ;;
    help)
        help
    ;;
    *)
        echo "Command 'fix $subcommand' is unknown."
        echo ""
        help
    ;;
esac