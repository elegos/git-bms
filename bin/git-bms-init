#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${SCRIPT_DIR}/gitbmscommon"

check_git_repo

BRANCH_check_current_prefix_name() {
    if [[ "$1" == *" "* ]]; then
        echo "Invalid branch name: it must not contain spaces"
    elif [[ "$1" == *"/"* ]]; then
        echo "Invalid branch name: it must not contain slashes"
    fi
}

branches=()
while [ true ]; do
    while [ true ]; do
        dev_branch=$(question_string "Development's branch name" "develop")
        if [ dev_branch = "" ]; then
            dev_branch="develop"
        fi
        error_msg=$(BRANCH_check_current_prefix_name "${dev_branch}")
        if [ "${error_msg}" != "" ]; then
            echo "${error_msg}"
            continue
        fi

        branches=(${dev_branch})
        break
    done

    while [ true ]; do
        branch=$(question_string "Next non productive branch (press enter to finish)")
        error_msg=$(BRANCH_check_current_prefix_name "${branch}")

        if [ "${error_msg}" != "" ]; then
            echo "${error_msg}"
        elif [ "${branch}" = "" ]; then
            break
        elif [[ ${branches[@]} =~ "${branch}" ]]; then
            echo "The branch '${branch}' has already been added"
        else
            branches+=(${branch})
        fi
    done
    while [ true ]; do
        prod_branch=$(question_string "Production branch name" "main")
        if [[ ${branches[@]} =~ "${prod_branch}" ]]; then
            echo "The branch '${prod_branch}' has already been added"
            continue
        fi

        branches+=(${prod_branch})
        break
    done

    branches_flow=$(IFS=$'|'; echo "${branches[*]}" )
    branches_flow=$(echo $branches_flow | sed -e 's/|/ -\> /g')
    echo ""
    echo "Branches flow will be: ${branches_flow}"
    echo ""

    branch_ok=$(question_string "Is the flow correct (y/n)?" "y")

    if [ "${branch_ok}" = "y" ]; then
        break
    fi

    echo "Let's try again..."
    echo ""
done

echo ""
echo "Feature branches:"
echo -e "\tfeature/NAME_OF_THE_FIX"
echo -e "\tFinish will merge in: ${branches[0]}"
merge_in_branches=(${branches[1]})
tot_branches=${#merge_in_branches}
iter_i=1
for branch in ${branches[@]:1}; do
    merge_in_branches=${branches[@]:0:$iter_i+1}
    echo "Fixes of branch ${branch}:"
    echo -e "\t${branch}fix/NAME_OF_THE_FIX"
    echo -e "\tFinish will merge in: ${merge_in_branches}"
    echo ""
    ((iter_i+=1))
done

echo "${branches[@]}" > "${bms_config_file}"