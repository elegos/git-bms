#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${SCRIPT_DIR}/gitbmscommon"

start() {
    CONFIG_check_existance
    dev_branch=$(CONFIG_get_dev_branch)
    BRANCH_check_current_exact_match "${dev_branch}"
    target_branch="feature/$1"
    
    if [[ "$1" == *" "* ]] || [[ "$1" == *"/"* ]]; then
        echo "Invalid feature name ($1). The name must not contain slashes or spaces" 1>&2

        exit 1
    fi

    git checkout -b "${target_branch}"
}

finish() {
    CONFIG_check_existance
    BRANCH_check_current_prefix "feature"

    no_delete=$(find_in_array "--no-delete" $@)
    dev_branch=$(CONFIG_get_dev_branch)
    feature_branch=$(BRANCH_current_branch)

    # Cherry-pick strategy
    if [ $(CONFIG_get_feature_finish_strategy) == "c" ]; then
        diff_commits=$(git cherry "${dev_branch}"|grep '+'|awk '{print $2}')

        CHERRY_PICK_apply_commits_to_branch "${dev_branch}" ${diff_commits}
        git checkout "${dev_branch}"
    else # Merge strategy
        git checkout "${dev_branch}" > /dev/null 2>&1
        git merge "${feature_branch}"
        if [ $? -ne 0 ]; then
            echo "Please fix the branch conflicts first and try again."
            git merge --abort
            git checkout "${feature_branch}"

            exit 1
        fi
    fi

    if [ ${no_delete} -eq 0 ]; then
        git branch -D "${feature_branch}"
    fi
}

help() {
    echo "Usage: git bms feature <subcommand>"
    echo "Available subcommands:"
    echo -e "\tstart <name of the new feature>"
    echo -e "\t\tStarts a new feature branch (if it does not already exists - the name must not contain spaces or slashes)"
    echo -e "\t\tExample: git bms feature start my_new_feature"

    echo ""
    echo -e "\tfinish [--no-delete]"
    echo -e "\t\tFlags:"
    echo -e "\t\t\t--no-delete: do not delete the feature branch once the process is finished."
    echo -e "\t\tEnds the feature the current branch is being developed in. Must be in a feature/* branch."
    echo -e "\t\tThe process will merge the current branch into the development one."
    echo -e "\t\tExample: git bms feature finish --no-delete"

    echo ""
    echo -e "\tend"
    echo -e "\t\tAlias of: finish"

    echo ""
}

subcommand="$1"
shift

case "${subcommand}" in
    start)
        start $@
    ;;
    end|finish)
        finish $@
    ;;
    help)
        help
    ;;
    *)
    echo "Command 'feature $subcommand' is unknown."
    echo ""
    help
    ;;
esac